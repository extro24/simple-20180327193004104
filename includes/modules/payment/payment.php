<?phpclass Payment{	public $payments=array();		public function __construct(){		$this->loadPayments();	}		public function loadPayments(){		global $_SYSTEM_PATH,$_MODULES_PATH;				$pDir=dir($_SYSTEM_PATH.$_MODULES_PATH.'payment/engines/');				while (false !== ($entry = $pDir->read())) {			if (strtolower(substr($entry,-4))=='.php'){				include_once $_SYSTEM_PATH.$_MODULES_PATH.'payment/engines/'.$entry;				$tmpPaymentName=strtolower(substr($entry,0,-4));				$tmpPayment=new $tmpPaymentName();				if ($tmpPayment->enabled=='1'){					$this->payments[$tmpPayment->class_name]=$tmpPayment;				}			}		}		$pDir->close();	}//		public function process(){		$provider=$this->getProvider();		if ($provider!==false){			$processor=&$this->payments[$provider];			$prcResult=$processor->validatePayment();			if ($prcResult!==false){				// get product					$chips=$this->getChips($prcResult->amount);				// update user					$this->updatePlayer($prcResult->player_id,$chips);				// calculate profit				// update report			}else{				// payment error			}		}	}//	// private functions	private function getProvider(){		$bsl=array();		$bigmatch=0;				foreach ($this->payments as $key=>$payment){			if (!isset($this->payments[$key]->matches)){				$this->payments[$key]->matches=0;			}						if (isset($_POST[$payment->identify_post_field_1]) && $payment->identify_post_field_1!=''){$this->payments[$key]->matches++;}			if (isset($_POST[$payment->identify_post_field_2]) && $payment->identify_post_field_2!=''){$this->payments[$key]->matches++;}			if (isset($_GET[$payment->identify_get_field_1]) && $payment->identify_get_field_1!=''){$this->payments[$key]->matches++;}			if (isset($_GET[$payment->identify_get_field_2]) && $payment->identify_get_field_2!=''){$this->payments[$key]->matches++;}			if ($_SERVER['REMOTE_HOST']==$payment->identify_REMOTE_HOST && $payment->identify_REMOTE_HOST!=''){$this->payments[$key]->matches++;}			if ($_SERVER['REMOTE_ADDR']==$payment->identify_REMOTE_ADDR && $payment->identify_REMOTE_ADDR!=''){$this->payments[$key]->matches++;}						if ($this->payments[$key]->matches>0){				$bsl[$this->payments[$key]->matches]=$payment->class_name;				if ($this->payments[$key]->matches>$bigmatch){					$bigmatch=$this->payments[$key]->matches;				}			}		}//				if (count($bsl)>0){			return $bsl[$bigmatch];		}else{			// generate error file			return false;		}			}//		private function getChips($cash){		global $db;		$chipsObj=$db->getRow("select * from prices where price<='".$cash."' order by price desc limit 1");		if ($chipsObj->price < $cash){			$ppc=($chipsObj->chips / $chipsObj->price);			$chipsObj->chips=round($ppc*$cash);		}		return $chipsObj->chips;	}//end getChips		private function updatePlayer($player_id,$chips){		$player=new Player($player_id);		$player->balance+=$chips;		$player->saveTableData(true);	}//end updatePlayer}//end class?>